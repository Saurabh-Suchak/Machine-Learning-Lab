# -*- coding: utf-8 -*-
"""Perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15K2_jFdhZ_sdqD2gXaAL4caS2mqHcjn3
"""

import random
import numpy as np

def stepactivation(g):
  if g >= 0:
    return 1
  else:
    return 0

def perceptron(w, x, b):
  g = np.dot(w, x) + b
  y = stepactivation(g)
  return y

def AndGate(x):
  w = np.array([1,1])
  b = -1.5
  return perceptron(w, x, b)

def NotGate(x):
  wn = -1
  bn = 0.5
  return perceptron(x, wn, bn)

def OrGate(x):
  w = np.array([1,1])
  b = -0.5
  return perceptron(x,w,b)

# function calls in sequence
def XorGate(x):
    y1 = AndGate(x)
    y2 = OrGate(x)
    y3 = NotGate(y1)
    final_x = np.array([y2, y3])
    finalOutput = AndGate(final_x)
    return finalOutput

test1 = np.array([0,0])
test2 = np.array([0,1])
test3 = np.array([1,0])
test4 = np.array([1,1])

print("AND Gate:")
print("AND ({},{}) = {}".format(0,0, AndGate(test1)))
print("AND ({},{}) = {}".format(0,1, AndGate(test2)))
print("AND ({},{}) = {}".format(1,0, AndGate(test3)))
print("AND ({},{}) = {}".format(1,1, AndGate(test4)))
print("")

print("NOT Gate:")
print("NOT ({}) = {}".format(1, NotGate(1)))
print("NOT ({}) = {}".format(0, NotGate(0)))
print("")


print("OR Gate:")
print("OR ({},{}) = {}".format(0,0, OrGate(test1)))
print("OR ({},{}) = {}".format(0,1, OrGate(test2)))
print("OR ({},{}) = {}".format(1,0, OrGate(test3)))
print("OR ({},{}) = {}".format(1,1, OrGate(test4)))
print("")

print("XOR Gate:")
print("XOR({}, {}) = {}".format(0, 0, XorGate(test1)))
print("XOR({}, {}) = {}".format(0, 1, XorGate(test2)))
print("XOR({}, {}) = {}".format(1, 0, XorGate(test3)))
print("XOR({}, {}) = {}".format(1, 1, XorGate(test4)))