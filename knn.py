# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvhEHy5TmmKiqqO5q8ZnKfuW4_CXpnIg

##Name: Saurabh Suchak
##A 62

#5a. Regression
"""

import random
import math

length = [10,11,12,7,9,8,6,15,14,7,10,13,9,5,5]
weight = [15,6,14,9,14,12,11,10,8,12,6,8,7,8,10]
cost = [45,37,48,33,38,40,35,50,46,35,36,44,32,30,30]

data = []
numOfPoints = 15


for i in range(numOfPoints):
  data.append((length[i], weight[i], cost[i]))

unknownPoint = (7, 8)


data

def distance(p1,p2):
  return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def knn(test_point,k, points):
  distances = []
  for i in range(numOfPoints):
    dist = distance(test_point,points[i])
    distances.append((dist,i))
  distances.sort()
  # print(distances)
  knearest = [distances[i] for i in range(k)]
  return knearest

def regression(unknownPoint, k):
  knearest = knn(unknownPoint, k, data)
  sum = 0
  for i in range(len(knearest)):
    sum += cost[knearest[i][1]]

  avg = sum/k
  return avg


# print('cost of given instance ,',(x,y),'is' )
print('cost of given instane,',(unknownPoint[0],unknownPoint[1]),'is' )
print (regression(unknownPoint,3))

"""#5b. Classification with iris dataset"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
import numpy as np

data = pd.read_csv("/content/gdrive/MyDrive/IRIS.csv")

data

points = []
numOfPoints = len(data)-1

for i in range(numOfPoints):
  points.append((data["sepal_length"][i], data["sepal_width"][i], data["petal_length"][i], data["petal_width"][i], data["species"][i]))

points

def distance(p1,p2):
  return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 + (p1[2] - p2[2])**2 + (p1[3] - p2[3])**2)

unknownPoint = (5.9, 3.0, 5.1, 1.8)

def classify(unknownPoint, k):
  knearest = knn(unknownPoint, k, points)
  speciesDict = {}

  for i in range(len(knearest)):
    species = points[knearest[i][1]][4]
    if  species not in speciesDict:
      speciesDict[species] = 1
    else:
      speciesDict[species] += 1

  sorted(speciesDict)
  return list(speciesDict.keys())[0]

print("the species of the point {0} is {1}".format(unknownPoint,classify(unknownPoint, 3)))